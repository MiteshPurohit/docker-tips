{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "linuxAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      }
    },
    "linuxAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Windows Jumpbox Virtual Machine (Password Only Supported)."
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Windows Jumpbox Virtual Machine."
      }
    },
    "jumpboxEndpointDNSNamePrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "masterEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos agents for the cluster.  This value can be from 1 to 100"
      },
      "allowedValues": [
        1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
        41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
        61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
        81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100
      ]
    },
    "masterCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        3,
        5
      ],
      "metadata": {
        "description": "The number of Mesos masters for the cluster."
      }
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2",
      "allowedValues": [
		"Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5",
		"Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
		"Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4",
		"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
		"Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
		"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
		"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
		"Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4",
		"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
		"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
	  ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "linuxPublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      }
    },
    "linuxOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      }
    },
    "linuxSku": {
      "type": "string",
      "defaultValue": "14.04.3-LTS",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      }
    },
    "linuxVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      }
    },
    "windowsJumpboxPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftVisualStudio",
      "metadata": {
        "description": "This is the windows publisher used by the windows jumpbox"
      }
    },
    "windowsJumpboxOffer": {
      "type": "string",
      "defaultValue": "VisualStudio",
      "metadata": {
        "description": "This is the windows offer used by the windows jumpbox"
      }
    },
    "windowsJumpboxSku": {
      "type": "string",
      "defaultValue": "VS-2015-Ent-AzureSDK-2.8-WS2012R2.2",
      "metadata": {
        "description": "This is the windows sku used by the windows jumpbox"
      }
    },
    "isValidation": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This is testing in the validation region"
      }
    },
    "disablePasswordAuthentication": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      }
    },
    "setLinuxConfigurationForVMCreate": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      }
    },
    "nameSuffix": {
      "type": "string",
      "defaultValue": "01234567",
      "metadata": {
        "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
      }
    },
    "vmsPerStorageAccount": {
      "type": "int",
      "defaultValue": 40,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      }
    },
    "postInstallScriptURI": {
      "type": "string",
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      }
    },
    "dockerLicenceData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Content of your Docker licnese file.  Not Required.  If not set, UCP install will fail."
      }
    },
    "ucpInstallScriptContent": {
      "type": "string",
      "defaultValue": "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",
      "metadata": {
        "description": "Content of your UCP install script. gzipped then Base64 encoded"
      }
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "adminPassword": "[parameters('linuxAdminPassword')]",
    "jumpboxEndpointDNSNamePrefix": "[tolower(parameters('jumpboxEndpointDNSNamePrefix'))]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentCount": "[parameters('agentCount')]",
    "masterCount": "[parameters('masterCount')]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "linuxPublisher": "[parameters('linuxPublisher')]",
    "linuxOffer": "[parameters('linuxOffer')]",
    "linuxSku": "[parameters('linuxSku')]",
    "linuxVersion": "[parameters('linuxVersion')]",
    "windowsJumpboxPublisher": "[parameters('windowsJumpboxPublisher')]",
    "windowsJumpboxOffer": "[parameters('windowsJumpboxOffer')]",
    "windowsJumpboxSku": "[parameters('windowsJumpboxSku')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
    "postInstallScriptURI": "[parameters('postInstallScriptURI')]",

    "nameSuffix": "[parameters('nameSuffix')]",

    "isValidation": "[parameters('isValidation')]",
    "storageLocations": [
      "[resourceGroup().location]",
      "East US 2 (Stage)"
    ],
    "storageLocation": "[variables('storageLocations')[variables('isValidation')]]",

    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
    "setLinuxConfigurationForVMCreate": "[parameters('setLinuxConfigurationForVMCreate')]",
    "linuxConfigurations": [
        {},
        {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[variables('sshKeyPath')]",
                        "keyData": "[variables('sshRSAPublicKey')]"
                    }
                ]
            }
        }
    ],
    "linuxConfiguration": "[variables('linuxConfigurations')[variables('setLinuxConfigurationForVMCreate')]]",

    "orchestratorName": "swarm",

    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "jumpboxPublicIPAddressName": "[concat(variables('orchestratorName'), '-jumpbox-ip-', variables('jumpboxEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",

    "osImagePublisher": "[variables('linuxPublisher')]",
    "osImageOffer": "[variables('linuxOffer')]",
    "osImageSKU": "[variables('linuxSku')]",
    "osImageVersion": "[variables('linuxVersion')]",

    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "masterAddressPrefix": "172.16.0.0/24",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "addressPrefix": "10.0.0.0/8",
    "subnetPrefix": "10.0.0.0/11",
    "storageAccountType": "Standard_GRS",
    "storageAccountPrefixes": [
      "0","6","c","i","o","u","1","7","d","j","p","v",
      "2","8","e","k","q","w","3","9","f","l","r","x",
      "4","a","g","m","s","y","5","b","h","n","t","z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "storageAccountBaseName": "[concat(uniqueString(variables('masterEndpointDNSNamePrefix')), variables('orchestratorName'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "omsStorageAccount": "none",
    "omsStorageAccountKey": "none",
    "masterProbableFQDN": "[concat(parameters('masterEndpointDNSNamePrefix'), '.', resourceGroup().location, '.cloudapp.azure.com')]",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddr'), ' ',variables('adminUsername'),' ', variables('masterProbableFQDN'),' ',variables('postInstallScriptURI'))]",

    "jumpboxNSGName": "[concat(variables('orchestratorName'), '-jumpbox-nsg-', variables('nameSuffix'))]",
    "jumpboxNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('jumpboxNSGName'))]",
    "jumpboxAddr": 4,
    "jumpboxVMName": "[concat(variables('orchestratorName'), '-jumpbox-', variables('nameSuffix'))]",
    "jumpboxVMSize": "Standard_A1",

    "jumpboxLinuxInstallParameters": "[concat(variables('adminUsername'))]",
    "jumpboxLinuxCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-ubuntu.sh ',variables('jumpboxLinuxInstallParameters'),' >> /var/log/azure/jumpbox-bootstrap.log 2>&1 &\" &')]",

    "setBrowserFirstTabDefaultPrefix": "powershell.exe -ExecutionPolicy Unrestricted -command \"New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer' ; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' -Name IntranetCompatibilityMode -Value 0 -Type DWord; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' -Name 'Start Page' -Type String -Value http://\"",
    "setBrowserFirstTabDefaultSuffix": "0:5050",
    "jumpboxWindowsCustomScript": "[concat(variables('setBrowserFirstTabDefaultPrefix'),variables('masterVMNamePrefix'),variables('setBrowserFirstTabDefaultSuffix'))]",

    "masterNSGName": "[concat(variables('orchestratorName'), '-master-nsg-', variables('nameSuffix'))]",
    "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('masterNSGName'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterFirstAddr": 5,
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterVMSize":"Standard_A2",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "agentFirstAddr": 20,
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'))]",
    "agentsLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
    "agentsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsLbName'))]",
    "agentsLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
    "agentsLbIPConfigID": "[concat(variables('agentsLbID'),'/frontendIPConfigurations/', variables('agentsLbIPConfigName'))]",
    "agentsLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
    "agentStorageAccountsCount": 5,
    "agentsPerIPv4Octet": 200,
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-swarm-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentRunCmdFile": "[concat(' -  content: |\n        #!/bin/bash\n        ',variables('agentCustomScript'),'\n    path: /opt/azure/containers/install-cluster.sh\n    permissions: \"0744\"\n')]",
    "agentRunCmd": "[concat('runcmd:\n -  [ /bin/bash, /opt/azure/containers/install-cluster.sh ]\n\n')]",
    "agentNatPoolName": "[concat(variables('orchestratorName'), '-agent-nat-pool-', variables('nameSuffix'))]",    
    "agentNatStartPort":50000,
    "agentNatEndPort":50099,
    "agentNatBackendPort":22,
	 "vmSizesMap": {
         "Standard_A0": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A1": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A3": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A4": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A5": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A6": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A7": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A8": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A9": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A10": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_A11": {
           "storageAccountType":"Standard_GRS"
         }, 
         "Standard_D1": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D3": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D4": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D11": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D12": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D13": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D14": {
           "storageAccountType":"Standard_GRS"
         }, 
         "Standard_D1_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D2_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D3_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D4_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D5_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D11_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D12_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D13_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_D14_v2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_G1": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_G2": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_G3": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_G4": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_G5": {
           "storageAccountType":"Standard_GRS"
         },
         "Standard_DS1": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS2": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS3": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS4": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS11": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS12": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS13": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_DS14": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS1": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS2": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS3": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS4": {
           "storageAccountType":"Premium_LRS"
         },
         "Standard_GS5": {
           "storageAccountType":"Premium_LRS"
         }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('masterStorageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[variables('storageLocation')]",
      "properties": {
        "accountType":"[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]",
            "[variables('masterAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          },
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterAddressPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('masterAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('masterPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('masterLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "masterLbRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/masterTcpProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "masterTcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]        
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(2200)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('masterNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "https",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 210,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
        "[variables('masterNSGID')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[variables('masterNSGID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('masterAddressPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
              "subnet": {
                "id": "[variables('masterSubnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        ', parameters('ucpInstallScriptContent'), '\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n -  encoding: gzip\n    content: !!binary |\n        ', parameters('dockerLicenceData'), '\n    path: /opt/azure/containers/docker_subscription.lic\n    permissions: \"0744\"\n\n'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('masterStorageAccountName'), '.blob.core.windows.net/vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [],
          "commandToExecute": "[variables('masterCustomScript')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),copyIndex(1))]",
      "apiVersion": "2015-06-15",
      "location": "[variables('storageLocation')]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentStorageAccountsCount')]"
      },
      "properties": {
        "accountType":"[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('agentPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('agentsLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentsLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('agentsLbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPProbe')]"
              }
            }
          },
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPSProbe')]"
              }
            }
          },
          {
            "name": "LBRulePort8080",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpPort8080Probe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "protocol": "tcp",
              "port": 443,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpPort8080Probe",
            "properties": {
              "protocol": "tcp",
              "port": 8080,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          }
        ],
        "inboundNatRules": [],
        "inboundNatPools":[
          {
            "name":"[variables('agentNatPoolName')]",
            "properties":{
              "frontendIPConfiguration":{
                "id":"[variables('agentsLbIPConfigID')]"
              },
              "protocol":"tcp",
              "frontendPortRangeStart":"[variables('agentNatStartPort')]",
              "frontendPortRangeEnd":"[variables('agentNatEndPort')]",
              "backendPort":"[variables('agentNatBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[concat(variables('agentVMNamePrefix'), 'vmss-',0)]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2)]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5)]",
        "[variables('agentsLbID')]",
        "[variables('vnetID')]"
      ],
      "sku": {
        "name": "[variables('agentVMSize')]",
        "tier": "Standard",
        "capacity": "[variables('agentCount')]"
      },
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('osImagePublisher')]",
              "offer": "[variables('osImageOffer')]",
              "sku": "[variables('osImageSKU')]",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat(variables('agentVMNamePrefix'), 'vmssosdisk', 0)]",
              "vhdContainers": [
                "[concat('https://',variables('storageAccountPrefixes')[mod(0,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(0,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),1, '.blob.core.windows.net/osdisk')]",
                "[concat('https://',variables('storageAccountPrefixes')[mod(1,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(1,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),2, '.blob.core.windows.net/osdisk')]",
                "[concat('https://',variables('storageAccountPrefixes')[mod(2,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(2,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),3, '.blob.core.windows.net/osdisk')]",
                "[concat('https://',variables('storageAccountPrefixes')[mod(3,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(3,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),4, '.blob.core.windows.net/osdisk')]",
                "[concat('https://',variables('storageAccountPrefixes')[mod(4,variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(4,variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),5, '.blob.core.windows.net/osdisk')]"
              ],
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('agentVMNamePrefix')]",
            "adminUsername": "[variables('adminUsername')]",
            "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        ', parameters('ucpInstallScriptContent'), '\n    path: /opt/azure/containers/configure-swarm-cluster.sh\n    permissions: \"0744\"\n -  encoding: gzip\n    content: !!binary |\n        ', parameters('dockerLicenceData'), '\n    path: /opt/azure/containers/docker_subscription.lic\n    permissions: \"0744\"\n\n',variables('agentRunCmdFile'),variables('agentRunCmd')))]",
            "linuxConfiguration": "[variables('linuxConfiguration')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "agentNodeNic",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "nicipconfig",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat(variables('agentsLbID'), '/inboundNatPools/', variables('agentNatPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  ],
  "outputs": {
    "jumpboxFQDN": {
      "type": "string",
      "value": ""
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
